# -*- coding: utf-8 -*-
"""rating.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xQnPewnLsHpsfg5o7-lqHoILooYfFHNI
"""

!pip install transformers

from transformers import TFBertModel,  BertConfig, BertTokenizerFast
from tensorflow.keras.layers import Input, Dropout, Dense
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.initializers import TruncatedNormal
from tensorflow.keras.losses import CategoricalCrossentropy
from tensorflow.keras.metrics import CategoricalAccuracy
from tensorflow.keras.utils import to_categorical
import pandas as pd
from sklearn.model_selection import train_test_split

from google.colab import files
uploaded = files.upload()

data = pd.read_json('train.json', lines=True)

# Select required columns
data = data[['reviewText', 'summary', 'overall']]

# Remove a row if any of the three remaining columns are missing
data = data.dropna()

# Remove rows, where the label is present only ones (can't be split)
# data = data.groupby('overall').filter(lambda x : len(x) > 1)

# Set your model output as categorical and save in new label col
data['overall_label'] = pd.Categorical(data['overall'])

# Transform your output to numeric
data['overall'] = data['overall_label'].cat.codes

# Split into train and test - stratify over Issue
data, data_test = train_test_split(data, test_size = 0.2, stratify = data[['overall']])

#######################################
### --------- Setup BERT ---------- ###

# Name of the BERT model to use
model_name = 'bert-base-uncased'

# Max length of tokens
max_length = 100

# Load transformers config and set output_hidden_states to False
config = BertConfig.from_pretrained(model_name)
config.output_hidden_states = False

# Load BERT tokenizer
tokenizer = BertTokenizerFast.from_pretrained(pretrained_model_name_or_path = model_name, config = config)

# Load the Transformers BERT model
transformer_model = TFBertModel.from_pretrained(model_name, config = config)


#######################################
### ------- Build the model ------- ###

# TF Keras documentation: https://www.tensorflow.org/api_docs/python/tf/keras/Model

# Load the MainLayer
bert = transformer_model.layers[0]

# Build your model input
input_ids = Input(shape=(max_length,), name='input_ids', dtype='int32')
attention_mask = Input(shape=(max_length,), name='attention_mask', dtype='int32') 
inputs = {'input_ids': input_ids, 'attention_mask': attention_mask}
# inputs = {'input_ids': input_ids}

# Load the Transformers BERT model as a layer in a Keras model
bert_model = bert(inputs)[1]
dropout = Dropout(config.hidden_dropout_prob, name='pooled_output')
pooled_output = dropout(bert_model, training=False)

# Then build your model output
overall = Dense(units=len(data.overall_label.value_counts()), kernel_initializer=TruncatedNormal(stddev=config.initializer_range), name='overall')(pooled_output)
outputs = {'overall': overall}

# And combine it all in a model object
model = Model(inputs=inputs, outputs=outputs, name='BERT_MultiLabel_MultiClass')

# Take a look at the model
model.summary()

#######################################
### ----- Evaluate the model ------ ###

# Ready test data
test_y_issue = to_categorical(data_test['overall'])
test_x = tokenizer(
    text=(data_test['reviewText']+data_test['summary']).to_list(),
    add_special_tokens=True,
    max_length=max_length,
    truncation=True,
    padding=True, 
    return_tensors='tf',
    return_token_type_ids = False,
    return_attention_mask = True,
    verbose = True)

#######################################
### ------- Train the model ------- ###

# Set an optimizer
optimizer = Adam(
    learning_rate=5e-05,
    epsilon=1e-08,
    decay=0.01,
    clipnorm=1.0)

# Set loss and metrics
loss = {'overall': CategoricalCrossentropy(from_logits = True)}
metric = {'overall': CategoricalAccuracy('accuracy')}

# Compile the model
model.compile(
    optimizer = optimizer,
    loss = loss, 
    metrics = metric)

# Ready output data for the model
y_issue = to_categorical(data['overall'])

# Tokenize the input (takes some time)
x = tokenizer(
    text=(data['reviewText']+data['summary']).to_list(),
    add_special_tokens=True,
    max_length=max_length,
    truncation=True,
    padding=True, 
    return_tensors='tf',
    return_token_type_ids = False,
    return_attention_mask = True,
    verbose = True)
es = EarlyStopping(monitor='val_loss', mode='min', verbose=1)
# Fit the model
history = model.fit(
    x={'input_ids': x['input_ids'], 'attention_mask': x['attention_mask']},
    # x={'input_ids': x['input_ids']},
    y={'overall': y_issue},
    #validation_split=0.2,
    validation_data = ({'input_ids': test_x['input_ids'], 'attention_mask': test_x['attention_mask']},{'overall': test_y_issue}),
    batch_size=64,
    epochs=5,
    callbacks=[es])

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# plt.savefig('gru_accuracy.pdf')
plt.close()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# plt.savefig('gru_loss.pdf')

#######################################
### ----- Evaluate the model ------ ###

# Ready test data
# test_y_issue = to_categorical(data_test['overall'])
# test_x = tokenizer(
#     text=(data_test['reviewText']+data_test['summary']).to_list(),
#     add_special_tokens=True,
#     max_length=max_length,
#     truncation=True,
#     padding=True, 
#     return_tensors='tf',
#     return_token_type_ids = False,
#     return_attention_mask = False,
#     verbose = True)

# Run evaluation
model_eval = model.evaluate(
    x={'input_ids': test_x['input_ids']},
    y={'overall': test_y_issue}
)

uploaded = files.upload()

data_pred = pd.read_json('test.json', lines=True)

# Select required columns
data_pred = data_pred[['reviewText', 'summary']]
data_pred.replace(to_replace=[None], value='', inplace=True)
print (data_pred['reviewText'][10])
print (data_pred['summary'][10])
print ((data_pred['reviewText']+data_pred['summary']).to_list()[10])
# Tokenize the input (takes some time)
X_pred = tokenizer(
    text=(data_pred['reviewText']+data_pred['summary']).to_list(),
    add_special_tokens=True,
    max_length=max_length,
    truncation=True,
    padding=True, 
    return_tensors='tf',
    return_token_type_ids = False,
    return_attention_mask = True,
    verbose = True)
y_pred = model.predict(x={'input_ids': X_pred['input_ids']})

uploaded = files.upload()

import numpy
print (len(y_pred['overall']))
predictions = open('submission.csv', 'w')
i = 0
for l in open('rating_pairs.csv'):
    if l.startswith('userID'):
        predictions.write(l)
        continue
    u,p = l.strip().split('-')
    # print ("y_pred", y_pred[i], " and ", i)
    predictions.write(u + '-' + p + ',' + str(numpy.argmax(y_pred['overall'][i])) + '.0\n')
    i += 1
files.download('submission.csv')
# predictions = open('rating_predictions_bak.csv', 'w')
# for j in y_pred['overall']:
#     predictions.write(str(numpy.argmax(j)) + '\n')